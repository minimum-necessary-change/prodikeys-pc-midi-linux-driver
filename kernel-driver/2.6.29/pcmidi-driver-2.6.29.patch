diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
--- a/drivers/hid/hid-core.c	2009-07-03 00:41:20.000000000 +0100
+++ b/drivers/hid/hid-core.c	2010-04-24 12:01:21.356644118 +0100
@@ -1259,6 +1259,7 @@ static const struct hid_device_id hid_bl
 	{ HID_USB_DEVICE(USB_VENDOR_ID_BELKIN, USB_DEVICE_ID_FLIP_KVM) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_CHERRY, USB_DEVICE_ID_CHERRY_CYMOTION) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_CHICONY, USB_DEVICE_ID_CHICONY_TACTICAL_PAD) },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_CREATIVELABS, USB_DEVICE_ID_PRODIKEYS_PCMIDI) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_CYPRESS, USB_DEVICE_ID_CYPRESS_BARCODE_1) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_CYPRESS, USB_DEVICE_ID_CYPRESS_BARCODE_2) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_CYPRESS, USB_DEVICE_ID_CYPRESS_MOUSE) },
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-creativelabs.c b/drivers/hid/hid-creativelabs.c
--- a/drivers/hid/hid-creativelabs.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/hid/hid-creativelabs.c	2010-04-24 12:01:21.357642749 +0100
@@ -0,0 +1,218 @@
+ /*
+ *  HID driver for some Creative Labs "special" devices
+ *
+ *  Copyright (c) 2009 Don Prince
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#include <linux/device.h>
+#include <linux/hid.h>
+#include <linux/module.h>
+#include <linux/usb.h>
+
+#include "hid-ids.h"
+#include "hid-creativelabs.h"
+
+#define CL_QUIRK_PCMIDI 0x00000001
+#define CL_QUIRK_NOGET	0x00010000
+
+
+extern void pcmidi_setup_extra_keys(struct pcmidi_snd *pm,
+	struct input_dev *input);
+extern int pcmidi_handle_report(struct pcmidi_snd *pm, unsigned report_id,
+	u8 *data, int size);
+extern int pcmidi_snd_initialise(struct pcmidi_snd *pm);
+extern int pcmidi_snd_terminate(struct pcmidi_snd *pm);
+
+/*
+ * PC-MIDI report descriptor for report id is wrong.
+ */
+static void cl_report_fixup(struct hid_device *hdev, __u8 *rdesc,
+		unsigned int rsize)
+{
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+	unsigned long quirks;
+
+	quirks = cl->quirks;
+
+	if ((quirks & CL_QUIRK_PCMIDI) && rsize == 178 &&
+	      rdesc[111] == 0x06 && rdesc[112] == 0x00 &&
+	      rdesc[113] == 0xff ){
+		dev_info(&hdev->dev, "fixing up pc-midi keyboard report "
+			"descriptor\n");
+ 
+		rdesc[144] = 0x18; /* report 4: was 0x10 report count */
+	}
+}
+
+static int cl_input_mapping(struct hid_device *hdev, struct hid_input *hi,
+		struct hid_field *field, struct hid_usage *usage,
+		unsigned long **bit, int *max)
+{
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+	struct pcmidi_snd *pm;
+	unsigned long quirks;
+
+	quirks = cl->quirks;
+	pm = cl->pm;
+
+	if (quirks & CL_QUIRK_PCMIDI && 
+		HID_UP_MSVENDOR == (usage->hid & HID_USAGE_PAGE) &&
+		1 == pm->ifnum){
+		pcmidi_setup_extra_keys(pm, hi->input);
+		return 0;
+	}
+
+	return 0;
+}
+
+
+static int cl_raw_event(struct hid_device *hdev, struct hid_report *report,
+	u8 *data, int size)
+{
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+	unsigned long quirks;
+	int ret = 0;
+
+	quirks = cl->quirks;
+
+	if (quirks & CL_QUIRK_PCMIDI && 1 == cl->pm->ifnum){
+		if ( report->id == data[0] )
+			switch ( report->id ){
+			case 0x01: /* midi keys (qwerty)*/
+			case 0x03: /* midi keyboard (musical)*/
+			case 0x04: /* extra/midi keys (qwerty)*/
+				ret = pcmidi_handle_report( cl->pm,
+						report->id, data, size );
+				break;
+			}	
+	}
+
+	return ret;
+}
+
+static int cl_probe(struct hid_device *hdev, const struct hid_device_id *id)
+{
+        int ret;
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	unsigned short ifnum = intf->cur_altsetting->desc.bInterfaceNumber;
+        unsigned long quirks = id->driver_data;
+        struct cl_device *cl;
+        struct pcmidi_snd *pm = NULL;
+
+        cl = kzalloc(sizeof(*cl), GFP_KERNEL);
+        if (cl == NULL){
+                dev_err(&hdev->dev, "creativelabs: can't alloc descriptor\n");
+                return -ENOMEM;
+        }
+
+        cl->quirks = quirks;
+	cl->hdev = hdev;
+
+	if ( quirks & CL_QUIRK_PCMIDI ){
+		pm = kzalloc(sizeof(*pm), GFP_KERNEL);
+		if (pm == NULL){
+			dev_err(&hdev->dev, "pc-midi: can't alloc descriptor\n");
+			ret = -ENOMEM;
+			goto err_free;
+		}
+		pm->cl = cl;
+		cl->pm = pm;
+		pm->ifnum = ifnum;
+	}
+
+        hid_set_drvdata(hdev, cl);
+
+        ret = hid_parse(hdev);
+        if (ret){
+                dev_err(&hdev->dev, "creativelabs hid parse failed\n");
+                goto err_free;
+        }
+
+	if (quirks & CL_QUIRK_NOGET){ /* hid_parse cleared all the quirks */
+    		hdev->quirks |= HID_QUIRK_NOGET;
+	}
+
+        ret = hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+        if (ret){
+                dev_err(&hdev->dev, "creativelabs hw start failed\n");
+                goto err_free;
+        }
+
+
+        if ( quirks & CL_QUIRK_PCMIDI ){
+		ret = pcmidi_snd_initialise(pm);
+		if (ret < 0)
+			goto err_stop;
+	}
+
+        return 0;
+err_stop:
+        hid_hw_stop(hdev);
+err_free:
+	if ( pm != NULL )
+	  kfree(pm);
+        kfree(cl);
+        return ret;
+}
+
+static void cl_remove(struct hid_device *hdev)
+{
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+	struct pcmidi_snd *pm;
+
+        hid_hw_stop(hdev);
+	
+        if (cl->quirks & CL_QUIRK_PCMIDI){
+		pm = cl->pm;
+		if (pm){
+			pcmidi_snd_terminate(pm);
+			kfree(pm);
+		}
+	}
+
+        kfree(cl);
+}
+
+
+
+static const struct hid_device_id cl_devices[] ={
+	{ HID_USB_DEVICE(USB_VENDOR_ID_CREATIVELABS,
+		USB_DEVICE_ID_PRODIKEYS_PCMIDI),
+	    .driver_data = CL_QUIRK_PCMIDI | CL_QUIRK_NOGET },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, cl_devices);
+
+static struct hid_driver cl_driver ={
+	.name = "creative",
+	.id_table = cl_devices,
+	.report_fixup = cl_report_fixup,
+	.input_mapping = cl_input_mapping,
+	.raw_event = cl_raw_event,
+	.probe = cl_probe,
+	.remove = cl_remove,
+};
+
+static int cl_init(void)
+{
+	return hid_register_driver(&cl_driver);
+}
+
+static void cl_exit(void)
+{
+	hid_unregister_driver(&cl_driver);
+}
+
+module_init(cl_init);
+module_exit(cl_exit);
+MODULE_LICENSE("GPL");
+
+/*HID_COMPAT_LOAD_DRIVER(creative);*/ /*CONFIG_HID_COMPAT, hid_dummy stuff*/
+ 
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-creativelabs.h b/drivers/hid/hid-creativelabs.h
--- a/drivers/hid/hid-creativelabs.h	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/hid/hid-creativelabs.h	2010-04-24 12:01:21.358645181 +0100
@@ -0,0 +1,64 @@
+#ifndef __HID_CREATIVELABS_H
+#define __HID_CREATIVELABS_H
+
+
+
+/* #define DEBUG */
+  
+#define cl_debug(format, arg...) pr_debug("hid-creative: " format "\n" , ## arg)
+#define cl_error(format, arg...) pr_err("hid-creative: " format "\n" , ## arg)
+#define pm_debug(format, arg...) pr_debug("hid-creative (pc-midi): " format "\n" , ## arg)
+#define pm_error(format, arg...) pr_err("hid-creative (pc-midi): " format "\n" , ## arg)
+
+struct pcmidi_snd;
+
+struct cl_device {
+	unsigned long 		quirks;
+
+	struct hid_device	*hdev; 
+	struct pcmidi_snd	*pm; /* pcmidi device context */
+};
+
+struct pcmidi_snd;
+
+struct pcmidi_sustain {
+	atomic_t		in_use;
+	struct pcmidi_snd	*pm;
+	struct timer_list 	timer;
+	unsigned char		status;
+	unsigned char		note;
+	unsigned char		velocity;
+};
+#define PCMIDI_SUSTAINED_MAX	32
+
+struct pcmidi_snd {
+	struct cl_device		*cl;
+	unsigned short 			ifnum;
+	struct hid_report		*pcmidi_report6;
+	struct input_dev 		*input_ep82;
+	unsigned short			midi_mode;
+	unsigned short			midi_sustain_mode;
+	unsigned short			midi_sustain;
+	unsigned short			midi_channel;
+	short				midi_octave;
+	struct pcmidi_sustain		sustained_notes[PCMIDI_SUSTAINED_MAX];
+	unsigned short			fn_state;
+	unsigned short 			last_key[24];
+	spinlock_t			rawmidi_in_lock;
+	struct snd_card			*card;
+	struct snd_rawmidi		*rwmidi;
+	struct snd_rawmidi_substream 	*in_substream;
+	struct snd_rawmidi_substream 	*out_substream;
+	unsigned long 			in_triggered;
+	unsigned long			out_active;
+	struct tasklet_struct   	tasklet;
+};
+
+/* polluting symbol space .. sorry 
+void pcmidi_setup_extra_keys(struct pcmidi_snd *pm, struct input_dev *input);
+int pcmidi_handle_report(struct pcmidi_snd *pm, unsigned report_id, u8 *data);
+int pcmidi_snd_initialise(struct pcmidi_snd *pm);
+int pcmidi_snd_terminate(struct pcmidi_snd *pm);
+*/
+
+#endif
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-dummy.c b/drivers/hid/hid-dummy.c
--- a/drivers/hid/hid-dummy.c	2009-07-03 00:41:20.000000000 +0100
+++ b/drivers/hid/hid-dummy.c	2010-04-24 12:01:21.358645181 +0100
@@ -22,6 +22,9 @@ static int __init hid_dummy_init(void)
 #ifdef CONFIG_HID_CHICONY_MODULE
 	HID_COMPAT_CALL_DRIVER(chicony);
 #endif
+#ifdef CONFIG_HID_CREATIVELABS_MODULE
+	HID_COMPAT_CALL_DRIVER(creativelabs);
+#endif
 #ifdef CONFIG_HID_CYPRESS_MODULE
 	HID_COMPAT_CALL_DRIVER(cypress);
 #endif
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
--- a/drivers/hid/hid-ids.h	2009-07-03 00:41:20.000000000 +0100
+++ b/drivers/hid/hid-ids.h	2010-04-24 12:01:21.359642932 +0100
@@ -133,6 +133,9 @@
 #define USB_DEVICE_ID_CODEMERCS_IOW_FIRST	0x1500
 #define USB_DEVICE_ID_CODEMERCS_IOW_LAST	0x15ff
 
+#define USB_VENDOR_ID_CREATIVELABS	0x041e
+#define USB_DEVICE_ID_PRODIKEYS_PCMIDI	0x2801
+
 #define USB_VENDOR_ID_CYGNAL		0x10c4
 #define USB_DEVICE_ID_CYGNAL_RADIO_SI470X	0x818a
 
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/hid-pcmidi.c b/drivers/hid/hid-pcmidi.c
--- a/drivers/hid/hid-pcmidi.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/hid/hid-pcmidi.c	2010-04-24 12:01:21.361642794 +0100
@@ -0,0 +1,726 @@
+/*
+ *  HID driver for the Prodikeys PC-MIDI Keyboard's 
+ *  midi & extra multimedia keys functionality
+ *
+ *  Copyright (c) 2009 Don Prince
+ *
+ *  Controls for Octave Shift Up/Down, Channel, and
+ *  Sustain Duration available via sysfs.
+ *
+ *  example path: /sys/bus/hid/devices/000x:041E:2801.000x/
+ *
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#include <linux/hid.h>
+#include <sound/core.h>
+#include <sound/initval.h>
+#include <sound/rawmidi.h>
+#include <linux/usb.h>
+#include <linux/mutex.h>
+
+#include "usbhid/usbhid.h"
+#include "hid-creativelabs.h"
+
+#define PCMIDI_MIDDLE_C 60
+#define PCMIDI_CHANNEL_MIN 0
+#define PCMIDI_CHANNEL_MAX 15
+#define PCMIDI_OCTAVE_MIN (-2)
+#define PCMIDI_OCTAVE_MAX 2
+#define PCMIDI_SUSTAIN_MIN 0
+#define PCMIDI_SUSTAIN_MAX 5000
+
+static const char shortname[] = "PC-MIDI";
+static const char longname[] = "Prodikeys PC-MIDI Keyboard";
+
+static int index[SNDRV_CARDS] = SNDRV_DEFAULT_IDX;
+static char *id[SNDRV_CARDS] = SNDRV_DEFAULT_STR;
+static int enable[SNDRV_CARDS] = SNDRV_DEFAULT_ENABLE_PNP;
+
+module_param_array(index, int, NULL, 0444);
+module_param_array(id, charp, NULL, 0444);
+module_param_array(enable, bool, NULL, 0444);
+MODULE_PARM_DESC(index, "Index value for the PC-MIDI virtual audio driver");
+MODULE_PARM_DESC(id, "ID string for the PC-MIDI virtual audio driver");
+MODULE_PARM_DESC(enable, "Enable for the PC-MIDI virtual audio driver");
+
+
+/* Output routine for the sysfs channel file */
+static ssize_t show_channel(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	dbg_hid("pcmidi sysfs read channel=%u\n", cl->pm->midi_channel);
+
+        return sprintf(buf, "%u (min:%u, max:%u)\n", cl->pm->midi_channel,
+		PCMIDI_CHANNEL_MIN, PCMIDI_CHANNEL_MAX);
+}
+
+/* Input routine for the sysfs channel file */
+static ssize_t store_channel(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	unsigned channel = 0;
+
+        if (sscanf(buf, "%u", &channel) > 0 && channel <= PCMIDI_CHANNEL_MAX){
+		dbg_hid("pcmidi sysfs write channel=%u\n", channel);
+		cl->pm->midi_channel = channel;
+                return strlen(buf);
+        }
+        return -EINVAL;
+}
+
+static DEVICE_ATTR(channel, S_IRUGO | S_IWUGO, show_channel,
+                store_channel);
+
+static struct device_attribute *sysfs_device_attr_channel = {
+                &dev_attr_channel,
+                };
+
+/* Output routine for the sysfs sustain file */
+static ssize_t show_sustain(struct device *dev,
+ struct device_attribute *attr, char *buf)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	dbg_hid("pcmidi sysfs read sustain=%u\n", cl->pm->midi_sustain);
+
+        return sprintf(buf, "%u (off:%u, max:%u (ms))\n", cl->pm->midi_sustain,
+		PCMIDI_SUSTAIN_MIN, PCMIDI_SUSTAIN_MAX);
+}
+
+/* Input routine for the sysfs sustain file */
+static ssize_t store_sustain(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	unsigned sustain = 0;
+
+        if (sscanf(buf, "%u", &sustain) > 0 && sustain <= PCMIDI_SUSTAIN_MAX){
+		dbg_hid("pcmidi sysfs write sustain=%u\n", sustain);
+		cl->pm->midi_sustain = sustain;
+		cl->pm->midi_sustain_mode = 
+			(0 == sustain || !cl->pm->midi_mode) ? 0 : 1;
+                return strlen(buf);
+        }
+        return -EINVAL;
+}
+
+static DEVICE_ATTR(sustain, S_IRUGO | S_IWUGO, show_sustain,
+                store_sustain);
+
+static struct device_attribute *sysfs_device_attr_sustain = {
+                &dev_attr_sustain,
+                };
+
+/* Output routine for the sysfs octave file */
+static ssize_t show_octave(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	dbg_hid("pcmidi sysfs read octave=%d\n", cl->pm->midi_octave);
+
+        return sprintf(buf, "%d (min:%d, max:%d)\n", cl->pm->midi_octave,
+		PCMIDI_OCTAVE_MIN, PCMIDI_OCTAVE_MAX);
+}
+
+/* Input routine for the sysfs octave file */
+static ssize_t store_octave(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+        struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+        struct cl_device *cl = (struct cl_device*)hid_get_drvdata(hdev);
+
+	int octave = 0;
+
+        if (sscanf(buf, "%d", &octave) > 0 && 
+		octave >= PCMIDI_OCTAVE_MIN && octave <= PCMIDI_OCTAVE_MAX){
+		dbg_hid("pcmidi sysfs write octave=%d\n", octave);
+		cl->pm->midi_octave = octave;
+                return strlen(buf);
+        }
+        return -EINVAL;
+}
+
+static DEVICE_ATTR(octave, S_IRUGO | S_IWUGO, show_octave,
+                store_octave);
+
+static struct device_attribute *sysfs_device_attr_octave = {
+                &dev_attr_octave,
+                };
+
+
+static void pcmidi_send_note(struct pcmidi_snd *pm,
+	unsigned char status, unsigned char note, unsigned char velocity)
+{
+	unsigned long flags;
+	unsigned char buffer[3];
+	int res = 0;
+	
+	buffer[0] = status;
+	buffer[1] = note;
+	buffer[2] = velocity;
+
+	spin_lock_irqsave(&pm->rawmidi_in_lock, flags);
+
+	if (!pm->in_substream)
+		goto drop_note;
+	if (!test_bit(pm->in_substream->number, &pm->in_triggered))
+		goto drop_note;
+
+	res = snd_rawmidi_receive( pm->in_substream, buffer, 3 );
+
+drop_note:
+	spin_unlock_irqrestore(&pm->rawmidi_in_lock, flags);
+
+	return;
+}
+
+void pcmidi_sustained_note_release(unsigned long data)
+{
+	struct pcmidi_sustain *pms = (struct pcmidi_sustain *)data;
+
+	dbg_hid("pcmidi sustain timer: interrupt=%s atomic=%s\n",
+		in_interrupt() ? "true":"false",
+		in_atomic() ? "true":"false");
+
+	pcmidi_send_note(pms->pm, pms->status, pms->note, pms->velocity);
+	atomic_set(&pms->in_use, 0);
+}
+
+void init_sustain_timers(struct pcmidi_snd *pm)
+{
+	struct pcmidi_sustain *pms;
+	unsigned i;
+
+	for (i = 0; i < PCMIDI_SUSTAINED_MAX; i++){
+		pms = &pm->sustained_notes[i];
+		atomic_set(&pms->in_use, 0);
+		pms->pm = pm;
+		setup_timer(&pms->timer, pcmidi_sustained_note_release,
+			(unsigned long)pms);
+	}
+}
+
+void stop_sustain_timers(struct pcmidi_snd *pm)
+{
+	struct pcmidi_sustain *pms;
+	unsigned i;
+
+	for (i = 0; i < PCMIDI_SUSTAINED_MAX; i++){
+		pms = &pm->sustained_notes[i];
+		atomic_set(&pms->in_use, 1);
+		del_timer_sync(&pms->timer);
+	}
+}
+
+static int pcmidi_get_output_report(struct pcmidi_snd *pm)
+{
+	struct hid_device *hdev = pm->cl->hdev;
+	struct hid_report *report;
+
+	list_for_each_entry(report, 
+		&hdev->report_enum[HID_OUTPUT_REPORT].report_list, list){
+		if (!(6 == report->id))
+			continue;
+
+		if (report->maxfield < 1){
+			dev_err(&hdev->dev, "output report is empty\n");
+			break;
+		}
+		if (report->field[0]->report_count != 2){
+			dev_err(&hdev->dev, "field count too low\n");
+			break;
+		}
+		pm->pcmidi_report6 = report;
+		return 0;
+	}
+	/* should never get here */
+	return -ENODEV;
+}
+
+static void pcmidi_submit_output_report(struct pcmidi_snd *pm, int state)
+{
+	struct hid_device *hdev = pm->cl->hdev;
+	struct hid_report *report = pm->pcmidi_report6;
+	report->field[0]->value[0] = 0x01;
+	report->field[0]->value[1] = state;
+	
+	usbhid_submit_report(hdev, report, USB_DIR_OUT);
+}
+
+
+static int pcmidi_handle_report1(struct pcmidi_snd *pm, u8 *data)
+{
+	u32 bit_mask;
+
+	bit_mask = data[1];
+	bit_mask = (bit_mask << 8) | data[2];
+	bit_mask = (bit_mask << 8) | data[3];
+
+	dbg_hid("pcmidi mode: %d\n", pm->midi_mode);
+
+	/*KEY_MAIL or octave down*/
+	if (pm->midi_mode && bit_mask == 0x004000){
+		/* octave down */
+		pm->midi_octave--;
+		if (pm->midi_octave < -2 )
+			pm->midi_octave = -2;
+		dbg_hid("pcmidi mode: %d octave: %d\n",
+			pm->midi_mode, pm->midi_octave);
+		return 1;
+	}
+	/*KEY_WWW or sustain*/
+	else if (pm->midi_mode && bit_mask == 0x000004){
+		/* sustain on/off*/
+		pm->midi_sustain_mode ^= 0x1;
+		return 1;
+	}
+
+	return 0; /* continue key processing */
+}
+
+static int pcmidi_handle_report3(struct pcmidi_snd *pm, u8 *data, int size)
+{
+	struct pcmidi_sustain *pms;
+	unsigned i,j;
+	unsigned char status, note, velocity;
+
+	unsigned num_notes = (size-1)/2;
+	for (j = 0; j < num_notes; j++)
+	{
+		note = data[j*2+1];
+		velocity = data[j*2+2];
+
+		if (note < 0x81){ /* note on */
+			status = 128 + 16 + pm->midi_channel; /* 1001nnnn */
+			note = note - 0x54 + PCMIDI_MIDDLE_C + (pm->midi_octave * 12);
+		}
+		else{ /* note off */
+			status = 128 + pm->midi_channel; /* 1000nnnn */
+			note = note - 0x94 + PCMIDI_MIDDLE_C + (pm->midi_octave*12);
+		
+			if (pm->midi_sustain_mode){
+				for (i = 0; i < PCMIDI_SUSTAINED_MAX; i++){
+					pms = &pm->sustained_notes[i];
+					if (!atomic_read(&pms->in_use)){
+						pms->status = status;
+						pms->note = note;
+						pms->velocity = velocity;
+						atomic_set(&pms->in_use, 1);
+
+						mod_timer(&pms->timer,
+							jiffies + msecs_to_jiffies(pm->midi_sustain));
+						return 1;
+					}
+				}
+			}
+		}
+		pcmidi_send_note(pm, status, note, velocity);
+	}
+
+	return 1;
+}
+
+static int pcmidi_handle_report4(struct pcmidi_snd *pm, u8 *data)
+{
+	unsigned 	key;
+	u32 		bit_mask;
+	u32 		bit_index;
+
+	bit_mask = data[1];
+	bit_mask = (bit_mask << 8) | data[2];
+	bit_mask = (bit_mask << 8) | data[3];
+
+	/* break keys */
+	for (bit_index = 0; bit_index < 24;bit_index++)
+	{
+		key = pm->last_key[bit_index];
+		if (!((0x01 << bit_index) & bit_mask))
+		{
+			input_event(pm->input_ep82, EV_KEY,
+				pm->last_key[bit_index], 0);
+			pm->last_key[bit_index] = 0;
+		}
+	}
+
+	/* make keys */
+	for (bit_index = 0; bit_index < 24; bit_index++)
+	{
+		key = 0;
+		switch ((0x01 << bit_index) & bit_mask){
+		case 0x000010: /* Fn lock*/
+			pm->fn_state ^= 0x000010;
+			if (pm->fn_state)
+				pcmidi_submit_output_report(pm, 0xc5);
+			else
+				pcmidi_submit_output_report(pm, 0xc6);
+			continue;
+		case 0x020000: /* midi launcher..send a key (qwerty) or not? */
+			pcmidi_submit_output_report(pm, 0xc1);
+			pm->midi_mode ^= 0x01;
+
+			dbg_hid("pcmidi mode: %d\n", pm->midi_mode);
+			continue;
+		case 0x100000: /* KEY_MESSENGER or octave up */
+			dbg_hid("pcmidi mode: %d\n", pm->midi_mode);
+			if (pm->midi_mode){
+				pm->midi_octave++;
+				if (pm->midi_octave > 2 )
+					pm->midi_octave = 2;
+				dbg_hid("pcmidi mode: %d octave: %d\n",
+					pm->midi_mode, pm->midi_octave);
+			    continue;
+			}
+			else
+				key = KEY_MESSENGER;
+			break;
+		case 0x400000:	key = KEY_CALENDAR; break;
+		case 0x080000:	key = KEY_ADDRESSBOOK; break;
+		case 0x040000:	key = KEY_DOCUMENTS; break;
+		case 0x800000:	key = KEY_WORDPROCESSOR; break;
+		case 0x200000:	key = KEY_SPREADSHEET; break;
+		case 0x010000:	key = KEY_COFFEE; break;
+		case 0x000100:	key = KEY_HELP; break;
+		case 0x000200:	key = KEY_SEND; break;
+		case 0x000400:	key = KEY_REPLY; break;
+		case 0x000800:	key = KEY_FORWARDMAIL; break;
+		case 0x001000:	key = KEY_NEW; break;
+		case 0x002000:	key = KEY_OPEN; break;
+		case 0x004000:	key = KEY_CLOSE; break;
+		case 0x008000:	key = KEY_SAVE; break;
+		case 0x000001:	key = KEY_UNDO; break;
+		case 0x000002:	key = KEY_REDO; break;
+		case 0x000004:	key = KEY_SPELLCHECK; break;
+		case 0x000008:	key = KEY_PRINT; break;
+		}
+		if (key){
+			input_event(pm->input_ep82, EV_KEY, key, 1);
+			pm->last_key[bit_index] = key;
+		}
+	}
+
+	return 1;
+}
+
+int pcmidi_handle_report(struct pcmidi_snd *pm, unsigned report_id, u8 *data, int size)
+{
+	int ret = 0;
+	
+	switch (report_id){
+	case 0x01: /* midi keys (qwerty)*/
+		ret = pcmidi_handle_report1( pm, data );
+		break;
+	case 0x03: /* midi keyboard (musical)*/
+		ret = pcmidi_handle_report3( pm, data, size );
+		break;
+	case 0x04: /* multimedia/midi keys (qwerty)*/
+		ret = pcmidi_handle_report4( pm, data );
+		break;
+	}	
+	return ret;
+}
+
+void pcmidi_setup_extra_keys(struct pcmidi_snd *pm, struct input_dev *input)
+{
+	/* reassigned functionality for N/A keys
+		MY PICTURES => 	KEY_WORDPROCESSOR
+		MY MUSIC=>	KEY_SPREADSHEET
+	*/
+	unsigned int keys[] = {
+		KEY_FN,
+		KEY_MESSENGER, KEY_CALENDAR,
+		KEY_ADDRESSBOOK, KEY_DOCUMENTS,
+		KEY_WORDPROCESSOR,
+		KEY_SPREADSHEET,
+		KEY_COFFEE,
+		KEY_HELP, KEY_SEND,
+		KEY_REPLY, KEY_FORWARDMAIL,
+		KEY_NEW, KEY_OPEN,
+		KEY_CLOSE, KEY_SAVE,
+		KEY_UNDO, KEY_REDO,
+		KEY_SPELLCHECK,	KEY_PRINT,
+		0
+	};
+
+	unsigned int *pkeys = &keys[0];
+	unsigned short i;
+
+	if ( pm->ifnum != 1 )  /* only set up ONCE for interace 1 */
+		return;
+
+	pm->input_ep82 = input;
+
+	for (i = 0; i < 24; i++ )
+		pm->last_key[i] = 0;
+
+	while (*pkeys != 0){
+		set_bit(*pkeys, pm->input_ep82->keybit);
+		++pkeys;
+	}
+}
+
+
+static int pcmidi_set_operational(struct pcmidi_snd *pm)
+{
+	if (pm->ifnum != 1)
+		return 0; /* only set up ONCE for interace 1 */
+	
+	pcmidi_get_output_report(pm);
+	pcmidi_submit_output_report(pm, 0xc1);
+	return 0;
+}
+
+
+static int pcmidi_snd_free(struct snd_device *dev)
+{                                                 
+        return 0;                                 
+}     
+
+static void pcmidi_out_tasklet(unsigned long data)
+{
+	struct pcmidi_snd *pm = (struct pcmidi_snd *)data;
+
+	if (!pm->out_active)
+		return;
+	if (!pm->out_substream)
+		return;
+
+	while (1){
+		/* just read them and drop them */
+		u8 b;
+		if (snd_rawmidi_transmit(pm->out_substream, &b, 1) != 1){
+			pm->out_active = 0;
+			break;
+		}
+	}
+}
+
+static int pcmidi_out_open(struct snd_rawmidi_substream *substream)
+{
+	struct pcmidi_snd *pm = substream->rmidi->private_data;
+
+	dbg_hid("pcmidi out open\n");
+	pm->out_substream = substream;
+	return 0;
+}
+ 
+static int pcmidi_out_close(struct snd_rawmidi_substream *substream)
+{
+/*	struct pcmidi_snd *pm = substream->rmidi->private_data;*/
+
+	dbg_hid("pcmidi out close\n");
+	return 0;
+}
+ 
+static void pcmidi_out_trigger(struct snd_rawmidi_substream *substream, int up)
+{
+	struct pcmidi_snd *pm = substream->rmidi->private_data;
+
+	dbg_hid("pcmidi out trigger %d\n", up);
+
+	pm->out_active = up;
+	if (up)
+		tasklet_hi_schedule(&pm->tasklet);
+}
+
+static int pcmidi_in_open(struct snd_rawmidi_substream *substream)
+{
+	struct pcmidi_snd *pm = substream->rmidi->private_data;
+
+	dbg_hid("pcmidi in open\n");
+	pm->in_substream = substream;
+	return 0;
+}
+
+static int pcmidi_in_close(struct snd_rawmidi_substream *substream)
+{
+/*	struct pcmidi_snd *pm = substream->rmidi->private_data;*/
+
+	dbg_hid("pcmidi in close\n");
+	return 0;
+}
+
+static void pcmidi_in_trigger(struct snd_rawmidi_substream *substream, int up)
+{
+	struct pcmidi_snd *pm = substream->rmidi->private_data;
+
+	dbg_hid("pcmidi in trigger %d\n", up);
+
+	if (up){
+		set_bit(substream->number, &pm->in_triggered);
+	}else{
+		clear_bit(substream->number, &pm->in_triggered);
+	}
+}
+
+static struct snd_rawmidi_ops pcmidi_in_ops = {
+	.open = pcmidi_in_open,
+	.close = pcmidi_in_close,
+	.trigger = pcmidi_in_trigger
+};
+
+static struct snd_rawmidi_ops pcmidi_out_ops = {
+	.open = pcmidi_out_open,
+	.close = pcmidi_out_close,
+	.trigger = pcmidi_out_trigger
+};
+
+int pcmidi_snd_initialise(struct pcmidi_snd *pm)
+{
+	static int dev;
+	struct snd_card *card;
+	struct snd_rawmidi *rwmidi;
+	int err;
+	int out_ports = 1;
+	int in_ports = 1;
+
+	static struct snd_device_ops ops = {
+		.dev_free = pcmidi_snd_free,
+	};
+
+	if (pm->ifnum != 1)
+		return 0; /* only set up midi device ONCE for interace 1 */
+
+	if (dev >= SNDRV_CARDS)
+		return -ENODEV;
+	if (!enable[dev]){
+		dev++;
+		return -ENOENT;
+	}
+
+	/* Setup sound card */
+	tasklet_init(&pm->tasklet, pcmidi_out_tasklet, (unsigned long)pm);
+
+	card = snd_card_new(index[dev], id[dev], THIS_MODULE, 0);
+	if (!card){
+		pm_error("failed to create pc-midi sound card\n");
+		err = -ENOMEM;
+		goto fail;
+	}
+	pm->card = card;
+
+	/* Setup sound device */
+	err = snd_device_new(card, SNDRV_DEV_LOWLEVEL, pm, &ops);
+	if (err < 0){
+		pm_error("failed to create pc-midi sound device: error %d\n",
+			err);
+		goto fail;
+	}
+
+	strncpy(card->driver, shortname, sizeof(card->driver));
+	strncpy(card->shortname, shortname, sizeof(card->shortname));
+	strncpy(card->longname, longname, sizeof(card->longname));
+
+	/* Set up rawmidi */
+	snd_component_add(card, "MIDI");
+	err = snd_rawmidi_new(card, card->shortname, 0,
+			      out_ports, in_ports, &rwmidi);
+	if (err < 0){
+		pm_error("failed to create pc-midi rawmidi device: error %d\n",
+			err);
+		goto fail;
+	}
+	pm->rwmidi = rwmidi;
+	strncpy(rwmidi->name, card->shortname, sizeof(rwmidi->name));
+	rwmidi->info_flags = SNDRV_RAWMIDI_INFO_INPUT |
+				SNDRV_RAWMIDI_INFO_OUTPUT |
+				SNDRV_RAWMIDI_INFO_DUPLEX;
+	rwmidi->private_data = pm;
+
+	snd_rawmidi_set_ops(rwmidi, SNDRV_RAWMIDI_STREAM_OUTPUT,
+		&pcmidi_out_ops);
+	snd_rawmidi_set_ops(rwmidi, SNDRV_RAWMIDI_STREAM_INPUT,
+		&pcmidi_in_ops);
+
+	snd_card_set_dev(card, &pm->cl->hdev->dev);
+
+	/* register it */
+	err = snd_card_register(card);
+	if (err < 0){
+		pm_error("failed to register pc-midi sound card: error %d\n",
+			err);
+		goto fail;
+	}
+
+	/* create sysfs variables */
+	if ((err = device_create_file(&pm->cl->hdev->dev,
+		sysfs_device_attr_channel))){
+		pm_error("failed to create sysfs attribute channel: error %d\n",
+			err);
+		goto fail;
+	}
+
+	if ((err = device_create_file(&pm->cl->hdev->dev,
+		sysfs_device_attr_sustain))){
+		pm_error("failed to create sysfs attribute sustain: error %d\n",
+			err);
+		goto fail_attr_sustain;
+	}
+
+	if ((err = device_create_file(&pm->cl->hdev->dev,
+		sysfs_device_attr_octave))){
+		pm_error("failed to create sysfs attribute octave: error %d\n",
+			err);
+		goto fail_attr_octave;
+	}
+
+	spin_lock_init(&pm->rawmidi_in_lock);
+
+	init_sustain_timers(pm);
+	pcmidi_set_operational(pm);
+
+	dbg_hid("pcmidi_snd_initialise finished ok\n");
+	return 0;
+
+fail_attr_sustain:
+	device_remove_file(&pm->cl->hdev->dev, sysfs_device_attr_sustain);
+fail_attr_octave:
+	device_remove_file(&pm->cl->hdev->dev, sysfs_device_attr_channel);
+fail:
+	if (pm->card){
+		snd_card_free(pm->card);
+		pm->card = NULL;
+	}
+	return err;
+}
+
+int pcmidi_snd_terminate(struct pcmidi_snd *pm)
+{
+	if (pm->card){
+		tasklet_disable(&pm->tasklet);
+		tasklet_kill(&pm->tasklet);
+
+		device_remove_file(&pm->cl->hdev->dev,
+			sysfs_device_attr_channel);
+		device_remove_file(&pm->cl->hdev->dev,
+			sysfs_device_attr_sustain);
+		device_remove_file(&pm->cl->hdev->dev,
+			sysfs_device_attr_octave);
+
+		stop_sustain_timers(pm);
+
+		snd_card_disconnect(pm->card);
+		snd_card_free_when_closed(pm->card);
+	}
+
+	return 0;
+}
+
+
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/Kconfig b/drivers/hid/Kconfig
--- a/drivers/hid/Kconfig	2009-07-03 00:41:20.000000000 +0100
+++ b/drivers/hid/Kconfig	2010-04-24 12:01:21.362519427 +0100
@@ -121,6 +121,22 @@ config HID_CHICONY
 	---help---
 	Support for Chicony Tactical pad.
 
+config HID_CREATIVELABS
+        tristate "Creative Labs devices support" if EMBEDDED
+        depends on USB_HID && SND
+	select SND_RAWMIDI
+        default !EMBEDDED
+        ---help---
+        Support for Creative Labs device support.
+	Say Y here if you have one of these devices
+	- Prodikeys PC-MIDI keyboard.
+          The PCMIDI acts as a USB Audio device, with one MIDI
+          input and one MIDI output. These MIDI jacks appear as
+          a sound "card" in the ALSA sound system.
+	  Note: if you say N here, this device will still function as a basic
+	  multimedia keyboard, but will lack support for the musical keyboard
+	  and some multimedia keys.
+
 config HID_CYPRESS
 	tristate "Cypress" if EMBEDDED
 	depends on USB_HID
diff -X /opt/scripts/diff-exclude.txt -Npaur a/drivers/hid/Makefile b/drivers/hid/Makefile
--- a/drivers/hid/Makefile	2009-07-03 00:41:20.000000000 +0100
+++ b/drivers/hid/Makefile	2010-04-24 12:01:21.362519427 +0100
@@ -20,11 +20,16 @@ ifdef CONFIG_LOGIRUMBLEPAD2_FF
 	hid-logitech-objs	+= hid-lg2ff.o
 endif
 
+ifdef CONFIG_HID_CREATIVELABS
+hid-creative-objs		:= hid-creativelabs.o hid-pcmidi.o
+endif
+
 obj-$(CONFIG_HID_A4TECH)	+= hid-a4tech.o
 obj-$(CONFIG_HID_APPLE)		+= hid-apple.o
 obj-$(CONFIG_HID_BELKIN)	+= hid-belkin.o
 obj-$(CONFIG_HID_CHERRY)	+= hid-cherry.o
 obj-$(CONFIG_HID_CHICONY)	+= hid-chicony.o
+obj-$(CONFIG_HID_CREATIVELABS)	+= hid-creative.o
 obj-$(CONFIG_HID_CYPRESS)	+= hid-cypress.o
 obj-$(CONFIG_HID_EZKEY)		+= hid-ezkey.o
 obj-$(CONFIG_HID_GYRATION)	+= hid-gyration.o
